# JDBC connection pool (use the built-in)
#cms.hibernate.connection.pool_size=1

# SQL dialect
#cms.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
cms.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Enable Hibernate's automatic session context management
cms.hibernate.current_session_context_class=thread

# hibernate transaction factory
#cms.hibernate.transaction.factory_class=org.hibernate.transaction.JDBCTransactionFactory

# Disable the second-level cache
#cms.hibernate.cache.provider_class=org.hibernate.cache.internal.NoCacheProvider

# Echo all executed SQL to stdout
cms.hibernate.show_sql=false

# Drop and re-create the database schema on startup
#cms.hibernate.hbm2ddl.auto=update


# connection pool settings
# -------------------------
# This property controls the maximum number of milliseconds that a client (that's you) 
# will wait for a connection from the pool. If this time is exceeded without a connection 
# becoming available, a SQLException will be thrown
cms.hikari.connectionTimeout=10000
# This property controls the maximum amount of time that a connection is allowed to 
# sit idle in the pool
cms.hikari.idleTimeout=60000
# This property controls the maximum lifetime of a connection in the pool
# We strongly recommend setting this value
cms.hikari.maxLifetime=300000
# for maximum performance and responsiveness to spike demands, we recommend not
#  setting this value and instead allowing HikariCP to act as a fixed size connection pool
cms.hikari.minimumIdle=20
# This property controls the maximum size that the pool is allowed to reach, 
# including both idle and in-use connections
cms.hikari.maximumPoolSize=20
# if you want your cmslication to start even when the database is down/unavailable, 
# set this property to false
cms.hikari.initializationFailFast=false
